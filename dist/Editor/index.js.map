{
  "version": 3,
  "sources": ["../../submodules/ecsy/src/Utils.js", "../../submodules/ecsy/src/SystemManager.js", "../../submodules/ecsy/src/ObjectPool.js", "../../submodules/ecsy/src/EventDispatcher.js", "../../submodules/ecsy/src/Query.js", "../../submodules/ecsy/src/QueryManager.js", "../../submodules/ecsy/src/Component.js", "../../submodules/ecsy/src/SystemStateComponent.js", "../../submodules/ecsy/src/EntityManager.js", "../../submodules/ecsy/src/ComponentManager.js", "../../submodules/ecsy/src/Version.js", "../../submodules/ecsy/src/WrapImmutableComponent.js", "../../submodules/ecsy/src/Entity.js", "../../submodules/ecsy/src/World.js", "../../src/Core/index.ts", "../../src/Editor/EditorContext.ts", "../../src/Core/ComponentRegistry.ts", "../../node_modules/gl-matrix/esm/common.js", "../../node_modules/gl-matrix/esm/mat3.js", "../../node_modules/gl-matrix/esm/vec2.js", "../../submodules/ecsy/src/Types.js", "../../src/Mathematics/Vector2.ts", "../../src/Core/Locomotion/DataComponent/TransformData2D.ts", "../../src/Core/Render/DataComponent/ImageRenderData2D.ts", "../../submodules/ecsy/src/System.js", "../../src/Core/Render/DataComponent/CameraData2D.ts", "../../submodules/ecsy/src/TagComponent.js", "../../src/Core/Render/TagComponent/MainCameraTag.ts", "../../src/Core/Render/System/Canvas2DRenderer.ts", "../../src/Core/Render/System/BuildInRenderers/Canvas2DImageRenderer.ts", "../../src/Core/Render/System/ClearCanvasSystem.ts", "../../src/Core/Render/RenderSystemRegister.ts", "../../src/Core/CoreSetup.ts", "../../src/Core/Render/TagComponent/CameraTag.ts", "../../src/Editor/EditorEntityListManager.ts", "../../src/Utils/System/CamDragSystem.ts", "../../src/Editor/System/EditorInspectorSystem.ts", "../../src/Editor/EditorSystemRegister.ts", "../../src/Editor/TagComponent/EditorSceneCamTag.ts", "../../src/Editor/EditorInitialization.ts", "../../src/Editor/index.ts"],
  "sourcesContent": ["/**\r\n * Return the name of a component\r\n * @param {Component} Component\r\n * @private\r\n */\r\nexport function getName(Component) {\r\n  return Component.name;\r\n}\r\n\r\n/**\r\n * Return a valid property name for the Component\r\n * @param {Component} Component\r\n * @private\r\n */\r\nexport function componentPropertyName(Component) {\r\n  return getName(Component);\r\n}\r\n\r\n/**\r\n * Get a key from a list of components\r\n * @param {Array(Component)} Components Array of components to generate the key\r\n * @private\r\n */\r\nexport function queryKey(Components) {\r\n  var ids = [];\r\n  for (var n = 0; n < Components.length; n++) {\r\n    var T = Components[n];\r\n\r\n    if (!componentRegistered(T)) {\r\n      throw new Error(`Tried to create a query with an unregistered component`);\r\n    }\r\n\r\n    if (typeof T === \"object\") {\r\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\r\n      ids.push(operator + T.Component._typeId);\r\n    } else {\r\n      ids.push(T._typeId);\r\n    }\r\n  }\r\n\r\n  return ids.sort().join(\"-\");\r\n}\r\n\r\n// Detector for browser's \"window\"\r\nexport const hasWindow = typeof window !== \"undefined\";\r\n\r\n// performance.now() \"polyfill\"\r\nexport const now =\r\n  hasWindow && typeof window.performance !== \"undefined\"\r\n    ? performance.now.bind(performance)\r\n    : Date.now.bind(Date);\r\n\r\nexport function componentRegistered(T) {\r\n  return (\r\n    (typeof T === \"object\" && T.Component._typeId !== undefined) ||\r\n    (T.isComponent && T._typeId !== undefined)\r\n  );\r\n}\r\n", "import { now } from \"./Utils.js\";\r\n\r\nexport class SystemManager {\r\n  constructor(world) {\r\n    this._systems = [];\r\n    this._executeSystems = []; // Systems that have `execute` method\r\n    this.world = world;\r\n    this.lastExecutedSystem = null;\r\n  }\r\n\r\n  registerSystem(SystemClass, attributes) {\r\n    if (!SystemClass.isSystem) {\r\n      throw new Error(\r\n        `System '${SystemClass.name}' does not extend 'System' class`\r\n      );\r\n    }\r\n\r\n    if (this.getSystem(SystemClass) !== undefined) {\r\n      console.warn(`System '${SystemClass.getName()}' already registered.`);\r\n      return this;\r\n    }\r\n\r\n    var system = new SystemClass(this.world, attributes);\r\n    if (system.init) system.init(attributes);\r\n    system.order = this._systems.length;\r\n    this._systems.push(system);\r\n    if (system.execute) {\r\n      this._executeSystems.push(system);\r\n      this.sortSystems();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  unregisterSystem(SystemClass) {\r\n    let system = this.getSystem(SystemClass);\r\n    if (system === undefined) {\r\n      console.warn(\r\n        `Can unregister system '${SystemClass.getName()}'. It doesn't exist.`\r\n      );\r\n      return this;\r\n    }\r\n\r\n    this._systems.splice(this._systems.indexOf(system), 1);\r\n\r\n    if (system.execute) {\r\n      this._executeSystems.splice(this._executeSystems.indexOf(system), 1);\r\n    }\r\n\r\n    // @todo Add system.unregister() call to free resources\r\n    return this;\r\n  }\r\n\r\n  sortSystems() {\r\n    this._executeSystems.sort((a, b) => {\r\n      return a.priority - b.priority || a.order - b.order;\r\n    });\r\n  }\r\n\r\n  getSystem(SystemClass) {\r\n    return this._systems.find((s) => s instanceof SystemClass);\r\n  }\r\n\r\n  getSystems() {\r\n    return this._systems;\r\n  }\r\n\r\n  removeSystem(SystemClass) {\r\n    var index = this._systems.indexOf(SystemClass);\r\n    if (!~index) return;\r\n\r\n    this._systems.splice(index, 1);\r\n  }\r\n\r\n  executeSystem(system, delta, time) {\r\n    if (system.initialized) {\r\n      if (system.canExecute()) {\r\n        let startTime = now();\r\n        system.execute(delta, time);\r\n        system.executeTime = now() - startTime;\r\n        this.lastExecutedSystem = system;\r\n        system.clearEvents();\r\n      }\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this._executeSystems.forEach((system) => system.stop());\r\n  }\r\n\r\n  execute(delta, time, forcePlay) {\r\n    this._executeSystems.forEach(\r\n      (system) =>\r\n        (forcePlay || system.enabled) && this.executeSystem(system, delta, time)\r\n    );\r\n  }\r\n\r\n  stats() {\r\n    var stats = {\r\n      numSystems: this._systems.length,\r\n      systems: {},\r\n    };\r\n\r\n    for (var i = 0; i < this._systems.length; i++) {\r\n      var system = this._systems[i];\r\n      var systemStats = (stats.systems[system.getName()] = {\r\n        queries: {},\r\n        executeTime: system.executeTime,\r\n      });\r\n      for (var name in system.ctx) {\r\n        systemStats.queries[name] = system.ctx[name].stats();\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n", "export class ObjectPool {\r\n  // @todo Add initial size\r\n  constructor(T, initialSize) {\r\n    this.freeList = [];\r\n    this.count = 0;\r\n    this.T = T;\r\n    this.isObjectPool = true;\r\n\r\n    if (typeof initialSize !== \"undefined\") {\r\n      this.expand(initialSize);\r\n    }\r\n  }\r\n\r\n  acquire() {\r\n    // Grow the list by 20%ish if we're out\r\n    if (this.freeList.length <= 0) {\r\n      this.expand(Math.round(this.count * 0.2) + 1);\r\n    }\r\n\r\n    var item = this.freeList.pop();\r\n\r\n    return item;\r\n  }\r\n\r\n  release(item) {\r\n    item.reset();\r\n    this.freeList.push(item);\r\n  }\r\n\r\n  expand(count) {\r\n    for (var n = 0; n < count; n++) {\r\n      var clone = new this.T();\r\n      clone._pool = this;\r\n      this.freeList.push(clone);\r\n    }\r\n    this.count += count;\r\n  }\r\n\r\n  totalSize() {\r\n    return this.count;\r\n  }\r\n\r\n  totalFree() {\r\n    return this.freeList.length;\r\n  }\r\n\r\n  totalUsed() {\r\n    return this.count - this.freeList.length;\r\n  }\r\n}\r\n", "/**\r\n * @private\r\n * @class EventDispatcher\r\n */\r\nexport default class EventDispatcher {\r\n  constructor() {\r\n    this._listeners = {};\r\n    this.stats = {\r\n      fired: 0,\r\n      handled: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add an event listener\r\n   * @param {String} eventName Name of the event to listen\r\n   * @param {Function} listener Callback to trigger when the event is fired\r\n   */\r\n  addEventListener(eventName, listener) {\r\n    let listeners = this._listeners;\r\n    if (listeners[eventName] === undefined) {\r\n      listeners[eventName] = [];\r\n    }\r\n\r\n    if (listeners[eventName].indexOf(listener) === -1) {\r\n      listeners[eventName].push(listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an event listener is already added to the list of listeners\r\n   * @param {String} eventName Name of the event to check\r\n   * @param {Function} listener Callback for the specified event\r\n   */\r\n  hasEventListener(eventName, listener) {\r\n    return (\r\n      this._listeners[eventName] !== undefined &&\r\n      this._listeners[eventName].indexOf(listener) !== -1\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener\r\n   * @param {String} eventName Name of the event to remove\r\n   * @param {Function} listener Callback for the specified event\r\n   */\r\n  removeEventListener(eventName, listener) {\r\n    var listenerArray = this._listeners[eventName];\r\n    if (listenerArray !== undefined) {\r\n      var index = listenerArray.indexOf(listener);\r\n      if (index !== -1) {\r\n        listenerArray.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatch an event\r\n   * @param {String} eventName Name of the event to dispatch\r\n   * @param {Entity} entity (Optional) Entity to emit\r\n   * @param {Component} component\r\n   */\r\n  dispatchEvent(eventName, entity, component) {\r\n    this.stats.fired++;\r\n\r\n    var listenerArray = this._listeners[eventName];\r\n    if (listenerArray !== undefined) {\r\n      var array = listenerArray.slice(0);\r\n\r\n      for (var i = 0; i < array.length; i++) {\r\n        array[i].call(this, entity, component);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset stats counters\r\n   */\r\n  resetCounters() {\r\n    this.stats.fired = this.stats.handled = 0;\r\n  }\r\n}\r\n", "import EventDispatcher from \"./EventDispatcher.js\";\r\nimport { queryKey } from \"./Utils.js\";\r\n\r\nexport default class Query {\r\n  /**\r\n   * @param {Array(Component)} Components List of types of components to query\r\n   */\r\n  constructor(Components, manager) {\r\n    this.Components = [];\r\n    this.NotComponents = [];\r\n\r\n    Components.forEach((component) => {\r\n      if (typeof component === \"object\") {\r\n        this.NotComponents.push(component.Component);\r\n      } else {\r\n        this.Components.push(component);\r\n      }\r\n    });\r\n\r\n    if (this.Components.length === 0) {\r\n      throw new Error(\"Can't create a query without components\");\r\n    }\r\n\r\n    this.entities = [];\r\n\r\n    this.eventDispatcher = new EventDispatcher();\r\n\r\n    // This query is being used by a reactive system\r\n    this.reactive = false;\r\n\r\n    this.key = queryKey(Components);\r\n\r\n    // Fill the query with the existing entities\r\n    for (var i = 0; i < manager._entities.length; i++) {\r\n      var entity = manager._entities[i];\r\n      if (this.match(entity)) {\r\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\r\n        entity.queries.push(this);\r\n        this.entities.push(entity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add entity to this query\r\n   * @param {Entity} entity\r\n   */\r\n  addEntity(entity) {\r\n    entity.queries.push(this);\r\n    this.entities.push(entity);\r\n\r\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\r\n  }\r\n\r\n  /**\r\n   * Remove entity from this query\r\n   * @param {Entity} entity\r\n   */\r\n  removeEntity(entity) {\r\n    let index = this.entities.indexOf(entity);\r\n    if (~index) {\r\n      this.entities.splice(index, 1);\r\n\r\n      index = entity.queries.indexOf(this);\r\n      entity.queries.splice(index, 1);\r\n\r\n      this.eventDispatcher.dispatchEvent(\r\n        Query.prototype.ENTITY_REMOVED,\r\n        entity\r\n      );\r\n    }\r\n  }\r\n\r\n  match(entity) {\r\n    return (\r\n      entity.hasAllComponents(this.Components) &&\r\n      !entity.hasAnyComponents(this.NotComponents)\r\n    );\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      key: this.key,\r\n      reactive: this.reactive,\r\n      components: {\r\n        included: this.Components.map((C) => C.name),\r\n        not: this.NotComponents.map((C) => C.name),\r\n      },\r\n      numEntities: this.entities.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Return stats for this query\r\n   */\r\n  stats() {\r\n    return {\r\n      numComponents: this.Components.length,\r\n      numEntities: this.entities.length,\r\n    };\r\n  }\r\n}\r\n\r\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\r\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\r\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\r\n", "import Query from \"./Query.js\";\r\nimport { queryKey } from \"./Utils.js\";\r\n\r\n/**\r\n * @private\r\n * @class QueryManager\r\n */\r\nexport default class QueryManager {\r\n  constructor(world) {\r\n    this._world = world;\r\n\r\n    // Queries indexed by a unique identifier for the components it has\r\n    this._queries = {};\r\n  }\r\n\r\n  onEntityRemoved(entity) {\r\n    for (var queryName in this._queries) {\r\n      var query = this._queries[queryName];\r\n      if (entity.queries.indexOf(query) !== -1) {\r\n        query.removeEntity(entity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback when a component is added to an entity\r\n   * @param {Entity} entity Entity that just got the new component\r\n   * @param {Component} Component Component added to the entity\r\n   */\r\n  onEntityComponentAdded(entity, Component) {\r\n    // @todo Use bitmask for checking components?\r\n\r\n    // Check each indexed query to see if we need to add this entity to the list\r\n    for (var queryName in this._queries) {\r\n      var query = this._queries[queryName];\r\n\r\n      if (\r\n        !!~query.NotComponents.indexOf(Component) &&\r\n        ~query.entities.indexOf(entity)\r\n      ) {\r\n        query.removeEntity(entity);\r\n        continue;\r\n      }\r\n\r\n      // Add the entity only if:\r\n      // Component is in the query\r\n      // and Entity has ALL the components of the query\r\n      // and Entity is not already in the query\r\n      if (\r\n        !~query.Components.indexOf(Component) ||\r\n        !query.match(entity) ||\r\n        ~query.entities.indexOf(entity)\r\n      )\r\n        continue;\r\n\r\n      query.addEntity(entity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback when a component is removed from an entity\r\n   * @param {Entity} entity Entity to remove the component from\r\n   * @param {Component} Component Component to remove from the entity\r\n   */\r\n  onEntityComponentRemoved(entity, Component) {\r\n    for (var queryName in this._queries) {\r\n      var query = this._queries[queryName];\r\n\r\n      if (\r\n        !!~query.NotComponents.indexOf(Component) &&\r\n        !~query.entities.indexOf(entity) &&\r\n        query.match(entity)\r\n      ) {\r\n        query.addEntity(entity);\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        !!~query.Components.indexOf(Component) &&\r\n        !!~query.entities.indexOf(entity) &&\r\n        !query.match(entity)\r\n      ) {\r\n        query.removeEntity(entity);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a query for the specified components\r\n   * @param {Component} Components Components that the query should have\r\n   */\r\n  getQuery(Components) {\r\n    var key = queryKey(Components);\r\n    var query = this._queries[key];\r\n    if (!query) {\r\n      this._queries[key] = query = new Query(Components, this._world);\r\n    }\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Return some stats from this class\r\n   */\r\n  stats() {\r\n    var stats = {};\r\n    for (var queryName in this._queries) {\r\n      stats[queryName] = this._queries[queryName].stats();\r\n    }\r\n    return stats;\r\n  }\r\n}\r\n", "export class Component {\r\n  constructor(props) {\r\n    if (props !== false) {\r\n      const schema = this.constructor.schema;\r\n\r\n      for (const key in schema) {\r\n        if (props && props.hasOwnProperty(key)) {\r\n          this[key] = props[key];\r\n        } else {\r\n          const schemaProp = schema[key];\r\n          if (schemaProp.hasOwnProperty(\"default\")) {\r\n            this[key] = schemaProp.type.clone(schemaProp.default);\r\n          } else {\r\n            const type = schemaProp.type;\r\n            this[key] = type.clone(type.default);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (process.env.NODE_ENV !== \"production\" && props !== undefined) {\r\n        this.checkUndefinedAttributes(props);\r\n      }\r\n    }\r\n\r\n    this.onComponentChanged = (component) => {};\r\n\r\n    this._pool = null;\r\n  }\r\n\r\n  copy(source) {\r\n    const schema = this.constructor.schema;\r\n\r\n    for (const key in schema) {\r\n      const prop = schema[key];\r\n\r\n      if (source.hasOwnProperty(key)) {\r\n        this[key] = prop.type.copy(source[key], this[key]);\r\n      }\r\n    }\r\n\r\n    // @DEBUG\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      this.checkUndefinedAttributes(source);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new this.constructor().copy(this);\r\n  }\r\n\r\n  reset() {\r\n    const schema = this.constructor.schema;\r\n\r\n    for (const key in schema) {\r\n      const schemaProp = schema[key];\r\n\r\n      if (schemaProp.hasOwnProperty(\"default\")) {\r\n        this[key] = schemaProp.type.copy(schemaProp.default, this[key]);\r\n      } else {\r\n        const type = schemaProp.type;\r\n        this[key] = type.copy(type.default, this[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    if (this._pool) {\r\n      this._pool.release(this);\r\n    }\r\n  }\r\n\r\n  getName() {\r\n    return this.constructor.getName();\r\n  }\r\n\r\n  checkUndefinedAttributes(src) {\r\n    const schema = this.constructor.schema;\r\n\r\n    // Check that the attributes defined in source are also defined in the schema\r\n    Object.keys(src).forEach((srcKey) => {\r\n      if (!schema.hasOwnProperty(srcKey)) {\r\n        console.warn(\r\n          `Trying to set attribute '${srcKey}' not defined in the '${this.constructor.name}' schema. Please fix the schema, the attribute value won't be set`\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nComponent.schema = {};\r\nComponent.isComponent = true;\r\nComponent.getName = function () {\r\n  return this.displayName || this.name;\r\n};\r\n", "import { Component } from \"./Component.js\";\r\n\r\nexport class SystemStateComponent extends Component {}\r\n\r\nSystemStateComponent.isSystemStateComponent = true;\r\n", "import { ObjectPool } from \"./ObjectPool.js\";\r\nimport QueryManager from \"./QueryManager.js\";\r\nimport EventDispatcher from \"./EventDispatcher.js\";\r\nimport { SystemStateComponent } from \"./SystemStateComponent.js\";\r\n\r\nclass EntityPool extends ObjectPool {\r\n  constructor(entityManager, entityClass, initialSize) {\r\n    super(entityClass, undefined);\r\n    this.entityManager = entityManager;\r\n\r\n    if (typeof initialSize !== \"undefined\") {\r\n      this.expand(initialSize);\r\n    }\r\n  }\r\n\r\n  expand(count) {\r\n    for (var n = 0; n < count; n++) {\r\n      var clone = new this.T(this.entityManager);\r\n      clone._pool = this;\r\n      this.freeList.push(clone);\r\n    }\r\n    this.count += count;\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class EntityManager\r\n */\r\nexport class EntityManager {\r\n  constructor(world) {\r\n    this.world = world;\r\n    this.componentsManager = world.componentsManager;\r\n\r\n    // All the entities in this instance\r\n    this._entities = [];\r\n    this._nextEntityId = 0;\r\n\r\n    this._entitiesByNames = {};\r\n\r\n    this._queryManager = new QueryManager(this);\r\n    this.eventDispatcher = new EventDispatcher();\r\n    this._entityPool = new EntityPool(\r\n      this,\r\n      this.world.options.entityClass,\r\n      this.world.options.entityPoolSize\r\n    );\r\n\r\n    // Deferred deletion\r\n    this.entitiesWithComponentsToRemove = [];\r\n    this.entitiesToRemove = [];\r\n    this.deferredRemovalEnabled = true;\r\n  }\r\n\r\n  getEntityByName(name) {\r\n    return this._entitiesByNames[name];\r\n  }\r\n\r\n  /**\r\n   * Create a new entity\r\n   */\r\n  createEntity(name) {\r\n    var entity = this._entityPool.acquire();\r\n    entity.alive = true;\r\n    entity.name = name || \"\";\r\n    if (name) {\r\n      if (this._entitiesByNames[name]) {\r\n        console.warn(`Entity name '${name}' already exist`);\r\n      } else {\r\n        this._entitiesByNames[name] = entity;\r\n      }\r\n    }\r\n\r\n    this._entities.push(entity);\r\n    this.eventDispatcher.dispatchEvent(ENTITY_CREATED, entity);\r\n    this.world.onEntityChanged.forEach(callback => {\r\n      callback(this._entities);\r\n    });\r\n    return entity;\r\n  }\r\n\r\n  // COMPONENTS\r\n\r\n  /**\r\n   * Add a component to an entity\r\n   * @param {Entity} entity Entity where the component will be added\r\n   * @param {Component} Component Component to be added to the entity\r\n   * @param {Object} values Optional values to replace the default attributes\r\n   */\r\n  entityAddComponent(entity, Component, values) {\r\n    // @todo Probably define Component._typeId with a default value and avoid using typeof\r\n    if (\r\n      typeof Component._typeId === \"undefined\" &&\r\n      !this.world.componentsManager._ComponentsMap[Component._typeId]\r\n    ) {\r\n      throw new Error(\r\n        `Attempted to add unregistered component \"${Component.getName()}\"`\r\n      );\r\n    }\r\n\r\n    if (~entity._ComponentTypes.indexOf(Component)) {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        console.warn(\r\n          \"Component type already exists on entity.\",\r\n          entity,\r\n          Component.getName()\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    entity._ComponentTypes.push(Component);\r\n\r\n    if (Component.__proto__ === SystemStateComponent) {\r\n      entity.numStateComponents++;\r\n    }\r\n\r\n    var componentPool = this.world.componentsManager.getComponentsPool(\r\n      Component\r\n    );\r\n\r\n    var component = componentPool\r\n      ? componentPool.acquire()\r\n      : new Component(values);\r\n\r\n    if (componentPool && values) {\r\n      component.copy(values);\r\n    }\r\n\r\n    entity._components[Component._typeId] = component;\r\n\r\n    this._queryManager.onEntityComponentAdded(entity, Component);\r\n    this.world.componentsManager.componentAddedToEntity(Component);\r\n\r\n    this.eventDispatcher.dispatchEvent(COMPONENT_ADDED, entity, Component);\r\n  }\r\n\r\n  /**\r\n   * Remove a component from an entity\r\n   * @param {Entity} entity Entity which will get removed the component\r\n   * @param {*} Component Component to remove from the entity\r\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\r\n   */\r\n  entityRemoveComponent(entity, Component, immediately) {\r\n    var index = entity._ComponentTypes.indexOf(Component);\r\n    if (!~index) return;\r\n\r\n    this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE, entity, Component);\r\n\r\n    if (immediately) {\r\n      this._entityRemoveComponentSync(entity, Component, index);\r\n    } else {\r\n      if (entity._ComponentTypesToRemove.length === 0)\r\n        this.entitiesWithComponentsToRemove.push(entity);\r\n\r\n      entity._ComponentTypes.splice(index, 1);\r\n      entity._ComponentTypesToRemove.push(Component);\r\n\r\n      entity._componentsToRemove[Component._typeId] =\r\n        entity._components[Component._typeId];\r\n      delete entity._components[Component._typeId];\r\n    }\r\n\r\n    // Check each indexed query to see if we need to remove it\r\n    this._queryManager.onEntityComponentRemoved(entity, Component);\r\n\r\n    if (Component.__proto__ === SystemStateComponent) {\r\n      entity.numStateComponents--;\r\n\r\n      // Check if the entity was a ghost waiting for the last system state component to be removed\r\n      if (entity.numStateComponents === 0 && !entity.alive) {\r\n        entity.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  _entityRemoveComponentSync(entity, Component, index) {\r\n    // Remove T listing on entity and property ref, then free the component.\r\n    entity._ComponentTypes.splice(index, 1);\r\n    var component = entity._components[Component._typeId];\r\n    delete entity._components[Component._typeId];\r\n    component.dispose();\r\n    this.world.componentsManager.componentRemovedFromEntity(Component);\r\n  }\r\n\r\n  /**\r\n   * Remove all the components from an entity\r\n   * @param {Entity} entity Entity from which the components will be removed\r\n   */\r\n  entityRemoveAllComponents(entity, immediately) {\r\n    let Components = entity._ComponentTypes;\r\n\r\n    for (let j = Components.length - 1; j >= 0; j--) {\r\n      if (Components[j].__proto__ !== SystemStateComponent)\r\n        this.entityRemoveComponent(entity, Components[j], immediately);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the entity from this manager. It will clear also its components\r\n   * @param {Entity} entity Entity to remove from the manager\r\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\r\n   */\r\n  removeEntity(entity, immediately) {\r\n    var index = this._entities.indexOf(entity);\r\n\r\n    if (!~index) throw new Error(\"Tried to remove entity not in list\");\r\n\r\n    entity.alive = false;\r\n    this.entityRemoveAllComponents(entity, immediately);\r\n\r\n    if (entity.numStateComponents === 0) {\r\n      // Remove from entity list\r\n      this.eventDispatcher.dispatchEvent(ENTITY_REMOVED, entity);\r\n      this._queryManager.onEntityRemoved(entity);\r\n      if (immediately === true) {\r\n        this._releaseEntity(entity, index);\r\n      } else {\r\n        this.entitiesToRemove.push(entity);\r\n      }\r\n    }\r\n  }\r\n\r\n  _releaseEntity(entity, index) {\r\n    this._entities.splice(index, 1);\r\n\r\n    if (this._entitiesByNames[entity.name]) {\r\n      delete this._entitiesByNames[entity.name];\r\n    }\r\n    entity._pool.release(entity);\r\n    this.world.onEntityChanged.forEach(callback => {\r\n      callback(this._entities);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove all entities from this manager\r\n   */\r\n  removeAllEntities() {\r\n    for (var i = this._entities.length - 1; i >= 0; i--) {\r\n      this.removeEntity(this._entities[i]);\r\n    }\r\n  }\r\n\r\n  processDeferredRemoval() {\r\n    if (!this.deferredRemovalEnabled) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this.entitiesToRemove.length; i++) {\r\n      let entity = this.entitiesToRemove[i];\r\n      let index = this._entities.indexOf(entity);\r\n      this._releaseEntity(entity, index);\r\n    }\r\n    this.entitiesToRemove.length = 0;\r\n\r\n    for (let i = 0; i < this.entitiesWithComponentsToRemove.length; i++) {\r\n      let entity = this.entitiesWithComponentsToRemove[i];\r\n      while (entity._ComponentTypesToRemove.length > 0) {\r\n        let Component = entity._ComponentTypesToRemove.pop();\r\n\r\n        var component = entity._componentsToRemove[Component._typeId];\r\n        delete entity._componentsToRemove[Component._typeId];\r\n        component.dispose();\r\n        this.world.componentsManager.componentRemovedFromEntity(Component);\r\n\r\n        //this._entityRemoveComponentSync(entity, Component, index);\r\n      }\r\n    }\r\n\r\n    this.entitiesWithComponentsToRemove.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Get a query based on a list of components\r\n   * @param {Array(Component)} Components List of components that will form the query\r\n   */\r\n  queryComponents(Components) {\r\n    return this._queryManager.getQuery(Components);\r\n  }\r\n\r\n  // EXTRAS\r\n\r\n  /**\r\n   * Return number of entities\r\n   */\r\n  count() {\r\n    return this._entities.length;\r\n  }\r\n\r\n  /**\r\n   * Return some stats\r\n   */\r\n  stats() {\r\n    var stats = {\r\n      numEntities: this._entities.length,\r\n      numQueries: Object.keys(this._queryManager._queries).length,\r\n      queries: this._queryManager.stats(),\r\n      numComponentPool: Object.keys(this.componentsManager._componentPool)\r\n        .length,\r\n      componentPool: {},\r\n      eventDispatcher: this.eventDispatcher.stats,\r\n    };\r\n\r\n    for (var ecsyComponentId in this.componentsManager._componentPool) {\r\n      var pool = this.componentsManager._componentPool[ecsyComponentId];\r\n      stats.componentPool[pool.T.getName()] = {\r\n        used: pool.totalUsed(),\r\n        size: pool.count,\r\n      };\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\nconst ENTITY_CREATED = \"EntityManager#ENTITY_CREATE\";\r\nconst ENTITY_REMOVED = \"EntityManager#ENTITY_REMOVED\";\r\nconst COMPONENT_ADDED = \"EntityManager#COMPONENT_ADDED\";\r\nconst COMPONENT_REMOVE = \"EntityManager#COMPONENT_REMOVE\";\r\n", "import { ObjectPool } from \"./ObjectPool.js\";\r\n\r\nexport class ComponentManager {\r\n  constructor() {\r\n    this.Components = [];\r\n    this._ComponentsMap = {};\r\n\r\n    this._componentPool = {};\r\n    this.numComponents = {};\r\n    this.nextComponentId = 0;\r\n  }\r\n\r\n  hasComponent(Component) {\r\n    return this.Components.indexOf(Component) !== -1;\r\n  }\r\n\r\n  registerComponent(Component, objectPool) {\r\n    if (this.Components.indexOf(Component) !== -1) {\r\n      console.warn(\r\n        `Component type: '${Component.getName()}' already registered.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    const schema = Component.schema;\r\n\r\n    if (!schema) {\r\n      throw new Error(\r\n        `Component \"${Component.getName()}\" has no schema property.`\r\n      );\r\n    }\r\n\r\n    for (const propName in schema) {\r\n      const prop = schema[propName];\r\n\r\n      if (!prop.type) {\r\n        throw new Error(\r\n          `Invalid schema for component \"${Component.getName()}\". Missing type for \"${propName}\" property.`\r\n        );\r\n      }\r\n    }\r\n\r\n    Component._typeId = this.nextComponentId++;\r\n    this.Components.push(Component);\r\n    this._ComponentsMap[Component._typeId] = Component;\r\n    this.numComponents[Component._typeId] = 0;\r\n\r\n    if (objectPool === undefined) {\r\n      objectPool = new ObjectPool(Component);\r\n    } else if (objectPool === false) {\r\n      objectPool = undefined;\r\n    }\r\n\r\n    this._componentPool[Component._typeId] = objectPool;\r\n  }\r\n\r\n  componentAddedToEntity(Component) {\r\n    this.numComponents[Component._typeId]++;\r\n  }\r\n\r\n  componentRemovedFromEntity(Component) {\r\n    this.numComponents[Component._typeId]--;\r\n  }\r\n\r\n  getComponentsPool(Component) {\r\n    return this._componentPool[Component._typeId];\r\n  }\r\n}\r\n", "export const Version = \"0.3.1\";\r\n", "const proxyMap = new WeakMap();\r\n\r\nconst proxyHandler = {\r\n  set(target, prop) {\r\n    throw new Error(\r\n      `Tried to write to \"${target.constructor.getName()}#${String(\r\n        prop\r\n      )}\" on immutable component. Use .getMutableComponent() to modify a component.`\r\n    );\r\n  },\r\n};\r\n\r\nexport default function wrapImmutableComponent(T, component) {\r\n  if (component === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  let wrappedComponent = proxyMap.get(component);\r\n\r\n  if (!wrappedComponent) {\r\n    wrappedComponent = new Proxy(component, proxyHandler);\r\n    proxyMap.set(component, wrappedComponent);\r\n  }\r\n\r\n  return wrappedComponent;\r\n}\r\n", "import Query from \"./Query.js\";\r\nimport wrapImmutableComponent from \"./WrapImmutableComponent.js\";\r\n\r\nexport class Entity {\r\n  constructor(entityManager) {\r\n    this._entityManager = entityManager || null;\r\n\r\n    // Unique ID for this entity\r\n    this.id = entityManager._nextEntityId++;\r\n    this.name = \"\";\r\n\r\n    // List of components types the entity has\r\n    this._ComponentTypes = [];\r\n\r\n    // Instance of the components\r\n    this._components = {};\r\n\r\n    this._componentsToRemove = {};\r\n\r\n    // Queries where the entity is added\r\n    this.queries = [];\r\n\r\n    // Used for deferred removal\r\n    this._ComponentTypesToRemove = [];\r\n\r\n    this.alive = false;\r\n\r\n    //if there are state components on a entity, it can't be removed completely\r\n    this.numStateComponents = 0;\r\n  }\r\n\r\n  // COMPONENTS\r\n\r\n  getComponent(Component, includeRemoved) {\r\n    var component = this._components[Component._typeId];\r\n\r\n    if (!component && includeRemoved === true) {\r\n      component = this._componentsToRemove[Component._typeId];\r\n    }\r\n\r\n    return process.env.NODE_ENV !== \"production\"\r\n      ? wrapImmutableComponent(Component, component)\r\n      : component;\r\n  }\r\n\r\n  getRemovedComponent(Component) {\r\n    const component = this._componentsToRemove[Component._typeId];\r\n\r\n    return process.env.NODE_ENV !== \"production\"\r\n      ? wrapImmutableComponent(Component, component)\r\n      : component;\r\n  }\r\n\r\n  getComponents() {\r\n    return this._components;\r\n  }\r\n\r\n  getComponentsToRemove() {\r\n    return this._componentsToRemove;\r\n  }\r\n\r\n  getComponentTypes() {\r\n    return this._ComponentTypes;\r\n  }\r\n\r\n  getMutableComponent(Component) {\r\n    var component = this._components[Component._typeId];\r\n\r\n    if (!component) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < this.queries.length; i++) {\r\n      var query = this.queries[i];\r\n      // @todo accelerate this check. Maybe having query._Components as an object\r\n      // @todo add Not components\r\n      if (query.reactive && query.Components.indexOf(Component) !== -1) {\r\n        query.eventDispatcher.dispatchEvent(\r\n          Query.prototype.COMPONENT_CHANGED,\r\n          this,\r\n          component\r\n        );\r\n      }\r\n    }\r\n\r\n    // Call component changed callback.\r\n    component.onComponentChanged(component);\r\n\r\n    return component;\r\n  }\r\n\r\n  addComponent(Component, values) {\r\n    this._entityManager.entityAddComponent(this, Component, values);\r\n    return this;\r\n  }\r\n\r\n  removeComponent(Component, forceImmediate) {\r\n    this._entityManager.entityRemoveComponent(this, Component, forceImmediate);\r\n    return this;\r\n  }\r\n\r\n  hasComponent(Component, includeRemoved) {\r\n    return (\r\n      !!~this._ComponentTypes.indexOf(Component) ||\r\n      (includeRemoved === true && this.hasRemovedComponent(Component))\r\n    );\r\n  }\r\n\r\n  hasRemovedComponent(Component) {\r\n    return !!~this._ComponentTypesToRemove.indexOf(Component);\r\n  }\r\n\r\n  hasAllComponents(Components) {\r\n    for (var i = 0; i < Components.length; i++) {\r\n      if (!this.hasComponent(Components[i])) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  hasAnyComponents(Components) {\r\n    for (var i = 0; i < Components.length; i++) {\r\n      if (this.hasComponent(Components[i])) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  removeAllComponents(forceImmediate) {\r\n    return this._entityManager.entityRemoveAllComponents(this, forceImmediate);\r\n  }\r\n\r\n  copy(src) {\r\n    // TODO: This can definitely be optimized\r\n    for (var ecsyComponentId in src._components) {\r\n      var srcComponent = src._components[ecsyComponentId];\r\n      this.addComponent(srcComponent.constructor);\r\n      var component = this.getComponent(srcComponent.constructor);\r\n      component.copy(srcComponent);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new Entity(this._entityManager).copy(this);\r\n  }\r\n\r\n  reset() {\r\n    this.id = this._entityManager._nextEntityId++;\r\n    this._ComponentTypes.length = 0;\r\n    this.queries.length = 0;\r\n\r\n    for (var ecsyComponentId in this._components) {\r\n      delete this._components[ecsyComponentId];\r\n    }\r\n  }\r\n\r\n  remove(forceImmediate) {\r\n    return this._entityManager.removeEntity(this, forceImmediate);\r\n  }\r\n}\r\n", "import { SystemManager } from \"./SystemManager.js\";\r\nimport { EntityManager } from \"./EntityManager.js\";\r\nimport { ComponentManager } from \"./ComponentManager.js\";\r\nimport { Version } from \"./Version.js\";\r\nimport { hasWindow, now } from \"./Utils.js\";\r\nimport { Entity } from \"./Entity.js\";\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  entityPoolSize: 0,\r\n  entityClass: Entity,\r\n};\r\n\r\nexport class World {\r\n  constructor(options = {}) {\r\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\r\n\r\n    this.componentsManager = new ComponentManager(this);\r\n    this.entityManager = new EntityManager(this);\r\n    this.systemManager = new SystemManager(this);\r\n\r\n    // Entity change callbacks.\r\n    this.onEntityChanged = [];\r\n\r\n    this.enabled = true;\r\n\r\n    this.eventQueues = {};\r\n\r\n    if (hasWindow && typeof CustomEvent !== \"undefined\") {\r\n      var event = new CustomEvent(\"ecsy-world-created\", {\r\n        detail: { world: this, version: Version },\r\n      });\r\n      window.dispatchEvent(event);\r\n    }\r\n\r\n    this.lastTime = now() / 1000;\r\n  }\r\n\r\n  registerComponent(Component, objectPool) {\r\n    this.componentsManager.registerComponent(Component, objectPool);\r\n    return this;\r\n  }\r\n\r\n  registerSystem(System, attributes) {\r\n    this.systemManager.registerSystem(System, attributes);\r\n    return this;\r\n  }\r\n\r\n  hasRegisteredComponent(Component) {\r\n    return this.componentsManager.hasComponent(Component);\r\n  }\r\n\r\n  unregisterSystem(System) {\r\n    this.systemManager.unregisterSystem(System);\r\n    return this;\r\n  }\r\n\r\n  getSystem(SystemClass) {\r\n    return this.systemManager.getSystem(SystemClass);\r\n  }\r\n\r\n  getSystems() {\r\n    return this.systemManager.getSystems();\r\n  }\r\n\r\n  execute(delta, time) {\r\n    if (!delta) {\r\n      time = now() / 1000;\r\n      delta = time - this.lastTime;\r\n      this.lastTime = time;\r\n    }\r\n\r\n    if (this.enabled) {\r\n      this.systemManager.execute(delta, time);\r\n      this.entityManager.processDeferredRemoval();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.enabled = false;\r\n  }\r\n\r\n  play() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  createEntity(name) {\r\n    return this.entityManager.createEntity(name);\r\n  }\r\n\r\n  stats() {\r\n    var stats = {\r\n      entities: this.entityManager.stats(),\r\n      system: this.systemManager.stats(),\r\n    };\r\n\r\n    return stats;\r\n  }\r\n}\r\n", "import { World } from \"ecsy/World\";\r\nimport { ITimeContext } from \"./Context/TimeContext\";\r\n\r\n// Main world to hold all game entities.\r\nexport let mainWorld = new World();\r\n// Physics world to hold all physics entities.\r\nexport let physicsWorld = new World();\r\n\r\n// Time context.\r\nexport const timeContext: ITimeContext = {\r\n  startTime: 0,\r\n  currentTime: 0,\r\n  deltaTime: 0,\r\n  timeScale: 1,\r\n  fixedTimeStep: 1 / 60,\r\n};\r\n\r\n// Frame update.\r\nconst mainUpdate = () => {\r\n  // Update time context.\r\n  let currentTime = Date.now() / 1000;\r\n  timeContext.deltaTime =\r\n    (currentTime - timeContext.currentTime) * timeContext.timeScale;\r\n  timeContext.currentTime = currentTime;\r\n\r\n  mainWorld.execute(timeContext.deltaTime);\r\n  requestAnimationFrame(mainUpdate);\r\n};\r\n\r\n// Physics update.\r\nconst physicsUpdate = async () => {\r\n  while (true) {\r\n    physicsWorld.execute(timeContext.fixedTimeStep);\r\n\r\n    // Wait for fixed time step.\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, timeContext.fixedTimeStep * 1000)\r\n    );\r\n  }\r\n};\r\n\r\nexport const mainInit = () => {\r\n  // Initialize time context.\r\n  timeContext.startTime = Date.now() / 1000;\r\n  timeContext.currentTime = timeContext.startTime;\r\n  timeContext.deltaTime = 0;\r\n\r\n  // Request animation frame.\r\n  requestAnimationFrame(mainUpdate);\r\n\r\n  // Start async physics update.\r\n  physicsUpdate();\r\n};\r\n\r\nexport const resetWorld = () => {\r\n  mainWorld = new World();\r\n  physicsWorld = new World();\r\n};\r\n", "import { Entity } from \"ecsy/Entity\";\r\n\r\nexport interface IEditorRenderContext {\r\n  mainCanvas: HTMLCanvasElement | null;\r\n  mainCamera: Entity | null;\r\n}\r\n\r\nexport interface IEditorUIContext {\r\n  entityLists: HTMLCollectionOf<HTMLDivElement> | null;\r\n  entityInspector: HTMLCollectionOf<HTMLDivElement> | null;\r\n\r\n  playButton: HTMLButtonElement | null;\r\n\r\n  entityNameInput: HTMLInputElement | null;\r\n  createEntityButton: HTMLButtonElement | null;\r\n}\r\n\r\nexport interface IEditorEventContext {\r\n  onEntitySelected: Array<(entity: Entity) => void>;\r\n}\r\n\r\nexport const editorRenderContext: IEditorRenderContext = {\r\n  mainCanvas: null,\r\n  mainCamera: null,\r\n};\r\n\r\nexport const editorUIContext: IEditorUIContext = {\r\n  entityLists: null,\r\n  entityInspector: null,\r\n  playButton: null,\r\n  entityNameInput: null,\r\n  createEntityButton: null,\r\n};\r\n\r\nexport const editorEventContext: IEditorEventContext = {\r\n  onEntitySelected: [],\r\n};\r\n", "import { Component, ComponentConstructor } from \"ecsy/Component\";\r\n\r\nexport interface IComponent extends Component<IComponent> {}\r\n\r\n// Registry of all components\r\nexport namespace IComponent {\r\n  const implementations: ComponentConstructor<IComponent>[] = [];\r\n\r\n  export function getImplementations(): ComponentConstructor<IComponent>[] {\r\n    return implementations;\r\n  }\r\n\r\n  export function register<T extends ComponentConstructor<IComponent>>(\r\n    ctor: T\r\n  ) {\r\n    implementations.push(ctor);\r\n    return ctor;\r\n  }\r\n}\r\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "export const copyValue = (src) => src;\r\n\r\nexport const cloneValue = (src) => src;\r\n\r\nexport const copyArray = (src, dest) => {\r\n  if (!src) {\r\n    return src;\r\n  }\r\n\r\n  if (!dest) {\r\n    return src.slice();\r\n  }\r\n\r\n  dest.length = 0;\r\n\r\n  for (let i = 0; i < src.length; i++) {\r\n    dest.push(src[i]);\r\n  }\r\n\r\n  return dest;\r\n};\r\n\r\nexport const cloneArray = (src) => src && src.slice();\r\n\r\nexport const copyJSON = (src) => JSON.parse(JSON.stringify(src));\r\n\r\nexport const cloneJSON = (src) => JSON.parse(JSON.stringify(src));\r\n\r\nexport const copyCopyable = (src, dest) => {\r\n  if (!src) {\r\n    return src;\r\n  }\r\n\r\n  if (!dest) {\r\n    return src.clone();\r\n  }\r\n\r\n  return dest.copy(src);\r\n};\r\n\r\nexport const cloneClonable = (src) => src && src.clone();\r\n\r\nexport function createType(typeDefinition) {\r\n  var mandatoryProperties = [\"name\", \"default\", \"copy\", \"clone\"];\r\n\r\n  var undefinedProperties = mandatoryProperties.filter((p) => {\r\n    return !typeDefinition.hasOwnProperty(p);\r\n  });\r\n\r\n  if (undefinedProperties.length > 0) {\r\n    throw new Error(\r\n      `createType expects a type definition with the following properties: ${undefinedProperties.join(\r\n        \", \"\r\n      )}`\r\n    );\r\n  }\r\n\r\n  typeDefinition.isType = true;\r\n\r\n  return typeDefinition;\r\n}\r\n\r\n/**\r\n * Standard types\r\n */\r\nexport const Types = {\r\n  Number: createType({\r\n    name: \"Number\",\r\n    default: 0,\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  Boolean: createType({\r\n    name: \"Boolean\",\r\n    default: false,\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  String: createType({\r\n    name: \"String\",\r\n    default: \"\",\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  Array: createType({\r\n    name: \"Array\",\r\n    default: [],\r\n    copy: copyArray,\r\n    clone: cloneArray,\r\n  }),\r\n\r\n  Ref: createType({\r\n    name: \"Ref\",\r\n    default: undefined,\r\n    copy: copyValue,\r\n    clone: cloneValue,\r\n  }),\r\n\r\n  JSON: createType({\r\n    name: \"JSON\",\r\n    default: null,\r\n    copy: copyJSON,\r\n    clone: cloneJSON,\r\n  }),\r\n};\r\n", "import { cloneClonable, copyCopyable, createType } from \"ecsy/Types\";\r\nimport { vec2 } from \"gl-matrix\";\r\n\r\n/**\r\n * Wrapper for glmatrix vec2.\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport class Vector2 {\r\n  value: vec2;\r\n\r\n  /**\r\n   * Creates an instance of Vector2.\r\n   * @param {number} x the x component of the vector.\r\n   * @param {number} y the y component of the vector.\r\n   * @memberof Vector2\r\n   */\r\n  constructor(x: number, y: number) {\r\n    this.value = vec2.fromValues(x, y);\r\n  }\r\n\r\n  set(x: number, y: number) {\r\n    this.value = vec2.fromValues(x, y);\r\n  }\r\n\r\n  copy(v: Vector2): Vector2 {\r\n    this.value = vec2.copy(this.value, v.value);\r\n    return this;\r\n  }\r\n\r\n  clone(): Vector2 {\r\n    return new Vector2(this.value[0], this.value[1]);\r\n  }\r\n}\r\n\r\nexport const Vector2Type = createType({\r\n  name: \"Vector2\",\r\n  default: new Vector2(0, 0),\r\n  copy: copyCopyable<Vector2>,\r\n  clone: cloneClonable<Vector2>,\r\n});\r\n", "import { Component, ComponentSchema } from \"ecsy/Component\";\r\nimport { Types } from \"ecsy/Types\";\r\nimport { Vector2, Vector2Type } from \"../../../Mathematics/Vector2\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class TransformData2D extends Component<TransformData2D> {\r\n  static schema: ComponentSchema = {\r\n    position: {\r\n      type: Vector2Type,\r\n      default: new Vector2(0, 0),\r\n    },\r\n    rotation: {\r\n      type: Types.Number,\r\n      default: 0,\r\n    },\r\n    scale: {\r\n      type: Vector2Type,\r\n      default: new Vector2(1, 1),\r\n    },\r\n  };\r\n\r\n  position!: Vector2;\r\n  rotation!: number;\r\n  scale!: Vector2;\r\n}\r\n", "import { Component, ComponentSchema } from \"ecsy/Component\";\r\nimport { Types } from \"ecsy/Types\";\r\nimport { Vector2, Vector2Type } from \"../../../Mathematics/Vector2\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class ImageRenderData2D extends Component<ImageRenderData2D> {\r\n  static schema: ComponentSchema = {\r\n    img: {\r\n      type: Types.Ref,\r\n      default: null,\r\n    },\r\n    imageCenter: {\r\n      type: Vector2Type,\r\n      default: new Vector2(0, 0),\r\n    },\r\n  };\r\n\r\n  img: CanvasImageSource | null = null;\r\n  imageCenter!: Vector2;\r\n}\r\n", "import Query from \"./Query.js\";\r\nimport { componentRegistered } from \"./Utils.js\";\r\n\r\nexport class System {\r\n  canExecute() {\r\n    if (this._mandatoryQueries.length === 0) return true;\r\n\r\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\r\n      var query = this._mandatoryQueries[i];\r\n      if (query.entities.length === 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getName() {\r\n    return this.constructor.getName();\r\n  }\r\n\r\n  constructor(world, attributes) {\r\n    this.world = world;\r\n    this.enabled = true;\r\n\r\n    // @todo Better naming :)\r\n    this._queries = {};\r\n    this.queries = {};\r\n\r\n    this.priority = 0;\r\n\r\n    // Used for stats\r\n    this.executeTime = 0;\r\n\r\n    if (attributes && attributes.priority) {\r\n      this.priority = attributes.priority;\r\n    }\r\n\r\n    this._mandatoryQueries = [];\r\n\r\n    this.initialized = true;\r\n\r\n    if (this.constructor.queries) {\r\n      for (var queryName in this.constructor.queries) {\r\n        var queryConfig = this.constructor.queries[queryName];\r\n        var Components = queryConfig.components;\r\n        if (!Components || Components.length === 0) {\r\n          throw new Error(\"'components' attribute can't be empty in a query\");\r\n        }\r\n\r\n        // Detect if the components have already been registered\r\n        let unregisteredComponents = Components.filter(\r\n          (Component) => !componentRegistered(Component)\r\n        );\r\n\r\n        if (unregisteredComponents.length > 0) {\r\n          throw new Error(\r\n            `Tried to create a query '${\r\n              this.constructor.name\r\n            }.${queryName}' with unregistered components: [${unregisteredComponents\r\n              .map((c) => c.getName())\r\n              .join(\", \")}]`\r\n          );\r\n        }\r\n\r\n        var query = this.world.entityManager.queryComponents(Components);\r\n\r\n        this._queries[queryName] = query;\r\n        if (queryConfig.mandatory === true) {\r\n          this._mandatoryQueries.push(query);\r\n        }\r\n        this.queries[queryName] = {\r\n          results: query.entities,\r\n        };\r\n\r\n        // Reactive configuration added/removed/changed\r\n        var validEvents = [\"added\", \"removed\", \"changed\"];\r\n\r\n        const eventMapping = {\r\n          added: Query.prototype.ENTITY_ADDED,\r\n          removed: Query.prototype.ENTITY_REMOVED,\r\n          changed: Query.prototype.COMPONENT_CHANGED, // Query.prototype.ENTITY_CHANGED\r\n        };\r\n\r\n        if (queryConfig.listen) {\r\n          validEvents.forEach((eventName) => {\r\n            if (!this.execute) {\r\n              console.warn(\r\n                `System '${this.getName()}' has defined listen events (${validEvents.join(\r\n                  \", \"\r\n                )}) for query '${queryName}' but it does not implement the 'execute' method.`\r\n              );\r\n            }\r\n\r\n            // Is the event enabled on this system's query?\r\n            if (queryConfig.listen[eventName]) {\r\n              let event = queryConfig.listen[eventName];\r\n\r\n              if (eventName === \"changed\") {\r\n                query.reactive = true;\r\n                if (event === true) {\r\n                  // Any change on the entity from the components in the query\r\n                  let eventList = (this.queries[queryName][eventName] = []);\r\n                  query.eventDispatcher.addEventListener(\r\n                    Query.prototype.COMPONENT_CHANGED,\r\n                    (entity) => {\r\n                      // Avoid duplicates\r\n                      if (eventList.indexOf(entity) === -1) {\r\n                        eventList.push(entity);\r\n                      }\r\n                    }\r\n                  );\r\n                } else if (Array.isArray(event)) {\r\n                  let eventList = (this.queries[queryName][eventName] = []);\r\n                  query.eventDispatcher.addEventListener(\r\n                    Query.prototype.COMPONENT_CHANGED,\r\n                    (entity, changedComponent) => {\r\n                      // Avoid duplicates\r\n                      if (\r\n                        event.indexOf(changedComponent.constructor) !== -1 &&\r\n                        eventList.indexOf(entity) === -1\r\n                      ) {\r\n                        eventList.push(entity);\r\n                      }\r\n                    }\r\n                  );\r\n                } else {\r\n                  /*\r\n                  // Checking just specific components\r\n                  let changedList = (this.queries[queryName][eventName] = {});\r\n                  event.forEach(component => {\r\n                    let eventList = (changedList[\r\n                      componentPropertyName(component)\r\n                    ] = []);\r\n                    query.eventDispatcher.addEventListener(\r\n                      Query.prototype.COMPONENT_CHANGED,\r\n                      (entity, changedComponent) => {\r\n                        if (\r\n                          changedComponent.constructor === component &&\r\n                          eventList.indexOf(entity) === -1\r\n                        ) {\r\n                          eventList.push(entity);\r\n                        }\r\n                      }\r\n                    );\r\n                  });\r\n                  */\r\n                }\r\n              } else {\r\n                let eventList = (this.queries[queryName][eventName] = []);\r\n\r\n                query.eventDispatcher.addEventListener(\r\n                  eventMapping[eventName],\r\n                  (entity) => {\r\n                    // @fixme overhead?\r\n                    if (eventList.indexOf(entity) === -1)\r\n                      eventList.push(entity);\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.executeTime = 0;\r\n    this.enabled = false;\r\n  }\r\n\r\n  play() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  // @question rename to clear queues?\r\n  clearEvents() {\r\n    for (let queryName in this.queries) {\r\n      var query = this.queries[queryName];\r\n      if (query.added) {\r\n        query.added.length = 0;\r\n      }\r\n      if (query.removed) {\r\n        query.removed.length = 0;\r\n      }\r\n      if (query.changed) {\r\n        if (Array.isArray(query.changed)) {\r\n          query.changed.length = 0;\r\n        } else {\r\n          for (let name in query.changed) {\r\n            query.changed[name].length = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    var json = {\r\n      name: this.getName(),\r\n      enabled: this.enabled,\r\n      executeTime: this.executeTime,\r\n      priority: this.priority,\r\n      queries: {},\r\n    };\r\n\r\n    if (this.constructor.queries) {\r\n      var queries = this.constructor.queries;\r\n      for (let queryName in queries) {\r\n        let query = this.queries[queryName];\r\n        let queryDefinition = queries[queryName];\r\n        let jsonQuery = (json.queries[queryName] = {\r\n          key: this._queries[queryName].key,\r\n        });\r\n\r\n        jsonQuery.mandatory = queryDefinition.mandatory === true;\r\n        jsonQuery.reactive =\r\n          queryDefinition.listen &&\r\n          (queryDefinition.listen.added === true ||\r\n            queryDefinition.listen.removed === true ||\r\n            queryDefinition.listen.changed === true ||\r\n            Array.isArray(queryDefinition.listen.changed));\r\n\r\n        if (jsonQuery.reactive) {\r\n          jsonQuery.listen = {};\r\n\r\n          const methods = [\"added\", \"removed\", \"changed\"];\r\n          methods.forEach((method) => {\r\n            if (query[method]) {\r\n              jsonQuery.listen[method] = {\r\n                entities: query[method].length,\r\n              };\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return json;\r\n  }\r\n}\r\n\r\nSystem.isSystem = true;\r\nSystem.getName = function () {\r\n  return this.displayName || this.name;\r\n};\r\n\r\nexport function Not(Component) {\r\n  return {\r\n    operator: \"not\",\r\n    Component: Component,\r\n  };\r\n}\r\n", "import { Component, ComponentSchema } from \"ecsy/Component\";\r\nimport { Types } from \"ecsy/Types\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\nexport enum BackgroundType {\r\n  Color = 0,\r\n  Texture = 1,\r\n}\r\n\r\n@IComponent.register\r\nexport class CameraData2D extends Component<CameraData2D> {\r\n  static schema: ComponentSchema = {\r\n    backgroundType: {\r\n      type: Types.Number,\r\n      default: BackgroundType.Color,\r\n    },\r\n    backgroundColor: {\r\n      type: Types.String,\r\n      default: \"#000000\",\r\n    },\r\n    backgroundTexture: {\r\n      type: Types.String,\r\n      default: \"\",\r\n    },\r\n  };\r\n\r\n  backgroundType!: BackgroundType;\r\n\r\n  backgroundColor!: string;\r\n  backgroundTexture!: string;\r\n}\r\n", "import { Component } from \"./Component.js\";\r\n\r\nexport class TagComponent extends Component {\r\n  constructor() {\r\n    super(false);\r\n  }\r\n}\r\n\r\nTagComponent.isTagComponent = true;\r\n", "import { TagComponent } from \"ecsy/TagComponent\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class MainCameraTag extends TagComponent {}\r\n", "import { Attributes, System, SystemQueries } from \"ecsy/System\";\r\nimport { mat3, vec2 } from \"gl-matrix\";\r\nimport { TransformData2D } from \"../../Locomotion/DataComponent/TransformData2D\";\r\nimport { CameraData2D } from \"../DataComponent/CameraData2D\";\r\nimport { MainCameraTag } from \"../TagComponent/MainCameraTag\";\r\n\r\n/**\r\n * Base class for canvas renderers.\r\n */\r\nexport class Canvas2DRenderer extends System {\r\n  static queries: SystemQueries = {\r\n    mainCamera: {\r\n      components: [MainCameraTag, CameraData2D, TransformData2D],\r\n    },\r\n  };\r\n\r\n  mainCanvas!: HTMLCanvasElement;\r\n  canvasContext!: CanvasRenderingContext2D;\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    this.mainCanvas = attributes?.mainCanvas;\r\n    this.canvasContext = this.mainCanvas.getContext(\r\n      \"2d\"\r\n    ) as CanvasRenderingContext2D;\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    // Check if main camera exists.\r\n    if (this.queries.mainCamera.results.length === 0) {\r\n      throw new Error(\"Main camera not found.\");\r\n    }\r\n    // Check if there's more than one main camera.\r\n    else if (this.queries.mainCamera.results.length > 1) {\r\n      throw new Error(\"More than one main camera found.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from world position to camera space.\r\n   *\r\n   * @param camTransform The transform of the camera.\r\n   * @param canvasSize the size of the canvas in vector2.\r\n   */\r\n  worldToCamera(camTransform: TransformData2D, canvasSize: vec2): mat3 {\r\n    // Construct world to camera matrix.\r\n    const worldToCamera = mat3.create();\r\n    // Center the camera.\r\n    mat3.fromTranslation(\r\n      worldToCamera,\r\n      vec2.fromValues(canvasSize[0] / 2, canvasSize[1] / 2)\r\n    );\r\n    mat3.translate(\r\n      worldToCamera,\r\n      worldToCamera,\r\n      vec2.negate(vec2.create(), camTransform.position.value)\r\n    );\r\n    mat3.rotate(worldToCamera, worldToCamera, camTransform.rotation);\r\n    mat3.scale(worldToCamera, worldToCamera, camTransform.scale.value);\r\n\r\n    return worldToCamera;\r\n  }\r\n\r\n  /**\r\n   * Construct a transform matrix from object space to world space.\r\n   *\r\n   * @param objTransform\r\n   */\r\n  objectToWorld(objTransform: TransformData2D): mat3 {\r\n    // TODO: Convert local transform to world transform.\r\n    // Construct entity to world matrix.\r\n    const objectToWorld = mat3.create();\r\n    mat3.fromTranslation(objectToWorld, objTransform.position.value);\r\n    mat3.rotate(objectToWorld, objectToWorld, objTransform.rotation);\r\n    mat3.scale(objectToWorld, objectToWorld, objTransform.scale.value);\r\n\r\n    return objectToWorld;\r\n  }\r\n}\r\n", "import { SystemQueries } from \"ecsy/System\";\r\nimport { mat3, vec2 } from \"gl-matrix\";\r\nimport { TransformData2D } from \"../../../Locomotion/DataComponent/TransformData2D\";\r\nimport { ImageRenderData2D } from \"../../DataComponent/ImageRenderData2D\";\r\nimport { Canvas2DRenderer } from \"../Canvas2DRenderer\";\r\n\r\nexport class Canvas2DImageRenderer extends Canvas2DRenderer {\r\n  static queries: SystemQueries = {\r\n    ...this.queries,\r\n    imageEntities: {\r\n      components: [ImageRenderData2D, TransformData2D],\r\n    },\r\n  };\r\n\r\n  override execute(delta: number, time: number): void {\r\n    try {\r\n      super.execute(delta, time);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return;\r\n    }\r\n\r\n    // Get the camera transform.\r\n    const cameraTransform = this.queries.mainCamera.results[0].getComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n    // Get the canvas size.\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n\r\n    const worldToCamera = this.worldToCamera(cameraTransform, canvasSize);\r\n\r\n    // Draw all image entities.\r\n    this.queries.imageEntities.results.forEach((imageEntity) => {\r\n      // Get the image transform.\r\n      const imageTransform = imageEntity.getComponent(\r\n        TransformData2D\r\n      ) as TransformData2D;\r\n      // Get the image render data.\r\n      const imageRenderData = imageEntity.getComponent(\r\n        ImageRenderData2D\r\n      ) as ImageRenderData2D;\r\n\r\n      // If the image is not loaded, skip.\r\n      if (!imageRenderData.img) return;\r\n\r\n      const objectToWorld = this.objectToWorld(imageTransform);\r\n\r\n      // Construct image to object matrix.\r\n      const imageToObject = mat3.create();\r\n      mat3.fromTranslation(\r\n        imageToObject,\r\n        vec2.negate(vec2.create(), imageRenderData.imageCenter.value)\r\n      );\r\n\r\n      // Calculate the final transform matrix.\r\n      // worldToCamera * objectToWorld * imageToObject\r\n      const finalTransform = mat3.create();\r\n      mat3.multiply(finalTransform, worldToCamera, objectToWorld);\r\n      mat3.multiply(finalTransform, finalTransform, imageToObject);\r\n\r\n      // Draw the image.\r\n      this.canvasContext.setTransform(\r\n        finalTransform[0],\r\n        finalTransform[1],\r\n        finalTransform[3],\r\n        finalTransform[4],\r\n        finalTransform[6],\r\n        finalTransform[7]\r\n      );\r\n\r\n      this.canvasContext.drawImage(imageRenderData.img, 0, 0);\r\n\r\n      // Reset the transform.\r\n      this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\r\n    });\r\n  }\r\n}\r\n", "import { Attributes, System } from \"ecsy/System\";\r\n\r\nexport class ClearCanvasSystem extends System {\r\n  mainCanvas!: HTMLCanvasElement;\r\n  canvasContext!: CanvasRenderingContext2D;\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    this.mainCanvas = attributes?.mainCanvas;\r\n    this.canvasContext = this.mainCanvas.getContext(\r\n      \"2d\"\r\n    ) as CanvasRenderingContext2D;\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    this.canvasContext.clearRect(\r\n      0,\r\n      0,\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n  }\r\n}\r\n", "import { World } from \"ecsy/World\";\r\nimport { IWorldRegister } from \"../../Utils/IWorldRegister\";\r\nimport { Canvas2DImageRenderer } from \"./System/BuildInRenderers/Canvas2DImageRenderer\";\r\nimport { ClearCanvasSystem } from \"./System/ClearCanvasSystem\";\r\n\r\nexport class RenderSystemRegister {\r\n  mainCanvas: HTMLCanvasElement;\r\n\r\n  constructor(mainCanvas: HTMLCanvasElement) {\r\n    this.mainCanvas = mainCanvas;\r\n  }\r\n\r\n  register: IWorldRegister = (world: World) => {\r\n    world.registerSystem(ClearCanvasSystem, {\r\n      mainCanvas: this.mainCanvas,\r\n      priority: -100,\r\n    });\r\n\r\n    world.registerSystem(Canvas2DImageRenderer, {\r\n      mainCanvas: this.mainCanvas,\r\n    });\r\n  };\r\n}\r\n", "import { mainWorld } from \".\";\r\nimport { editorRenderContext } from \"../Editor/EditorContext\";\r\nimport { IComponent } from \"./ComponentRegistry\";\r\nimport { RenderSystemRegister } from \"./Render/RenderSystemRegister\";\r\n\r\nexport const coreSetup = () => {\r\n  if (!editorRenderContext.mainCanvas) {\r\n    throw new Error(\"Main canvas is not ready.\");\r\n  }\r\n\r\n  // Register all components.\r\n  let componentConstructors = IComponent.getImplementations();\r\n  for (let i = 0; i < componentConstructors.length; i++) {\r\n    mainWorld.registerComponent(componentConstructors[i]);\r\n  }\r\n\r\n  // Register Render Systems.\r\n  new RenderSystemRegister(editorRenderContext.mainCanvas).register(mainWorld);\r\n};\r\n", "import { TagComponent } from \"ecsy/TagComponent\";\r\nimport { IComponent } from \"../../ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class CameraTag extends TagComponent {}\r\n", "import { Component, ComponentSchema } from \"ecsy/Component\";\r\nimport { Entity } from \"ecsy/Entity\";\r\nimport { mainWorld } from \"../Core\";\r\nimport { editorEventContext, editorUIContext } from \"./EditorContext\";\r\n\r\nexport const updateEntityList = (entities: Array<Entity>) => {\r\n  if (!editorUIContext.entityLists) {\r\n    return;\r\n  }\r\n\r\n  // Traverse all entityLists.\r\n  for (let i = 0; i < editorUIContext.entityLists.length; i++) {\r\n    const entityList = editorUIContext.entityLists[i];\r\n    // Remove all children.\r\n    while (entityList.firstChild) {\r\n      entityList.removeChild(entityList.firstChild);\r\n    }\r\n    // Add new children.\r\n    for (let j = 0; j < entities.length; j++) {\r\n      const entity = entities[j];\r\n      const entityDiv = document.createElement(\"div\");\r\n\r\n      // Add entity name.\r\n      const entityName = document.createElement(\"span\");\r\n      entityName.innerText = entity.name === \"\" ? \"Entity\" : entity.name;\r\n      entityDiv.appendChild(entityName);\r\n\r\n      // Add entity id.\r\n      const entityId = document.createElement(\"span\");\r\n      entityId.innerText = entity.id.toString();\r\n      entityDiv.appendChild(entityId);\r\n\r\n      // Set hover style.\r\n      entityDiv.style.cursor = \"pointer\";\r\n\r\n      // Add entity select button.\r\n      entityDiv.className = \"entityListItem\";\r\n      entityList.appendChild(entityDiv);\r\n\r\n      // Add select behavior.\r\n      entityDiv.onclick = () => {\r\n        // Invoke all onEntitySelected callbacks.\r\n        editorEventContext.onEntitySelected.forEach((callback) => {\r\n          callback(entity);\r\n        });\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const addNewEntity = (entityName?: string) => {\r\n  // Add new entity to entity list.\r\n  mainWorld.createEntity(entityName);\r\n};\r\n", "import { Attributes, System, SystemQueries } from \"ecsy/System\";\r\nimport { vec2 } from \"gl-matrix\";\r\nimport { TransformData2D } from \"../../Core/Locomotion/DataComponent/TransformData2D\";\r\nimport { CameraData2D } from \"../../Core/Render/DataComponent/CameraData2D\";\r\nimport { MainCameraTag } from \"../../Core/Render/TagComponent/MainCameraTag\";\r\nimport { Vector2 } from \"../../Mathematics/Vector2\";\r\n\r\n/**\r\n * This system enables right click drag to move the camera around the scene.\r\n */\r\nexport class CamDragSystem extends System {\r\n  static queries: SystemQueries = {\r\n    mainCamera: {\r\n      components: [MainCameraTag, CameraData2D, TransformData2D],\r\n    },\r\n  };\r\n\r\n  mainCanvas!: HTMLCanvasElement;\r\n  canvasContext!: CanvasRenderingContext2D;\r\n\r\n  // The required movement of the camera.\r\n  deltaPos: Vector2 = new Vector2(0, 0);\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    this.mainCanvas = attributes?.mainCanvas;\r\n    this.canvasContext = this.mainCanvas.getContext(\r\n      \"2d\"\r\n    ) as CanvasRenderingContext2D;\r\n\r\n    // Listen to mouse move event.\r\n    this.mainCanvas.addEventListener(\"mousemove\", (event) => {\r\n      // Check if the right mouse button is pressed.\r\n      if (event.buttons === 2) {\r\n        // Calculate the delta position.\r\n        vec2.add(\r\n          this.deltaPos.value,\r\n          this.deltaPos.value,\r\n          vec2.fromValues(-event.movementX, -event.movementY)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    // Get the main camera transform.\r\n    const mainCameraRes = this.queries.mainCamera.results;\r\n\r\n    // Check if there's only one main camera.\r\n    if (mainCameraRes.length !== 1) {\r\n      return;\r\n    }\r\n\r\n    const mainCamera = mainCameraRes[0].getMutableComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n\r\n    // Move the camera.\r\n    vec2.add(\r\n      mainCamera.position.value,\r\n      mainCamera.position.value,\r\n      this.deltaPos.value\r\n    );\r\n\r\n    // Reset the delta position.\r\n    vec2.set(this.deltaPos.value, 0, 0);\r\n  }\r\n}\r\n", "import { Component, ComponentSchema } from \"ecsy/Component\";\r\nimport { Entity } from \"ecsy/Entity\";\r\nimport { Attributes, System, SystemQueries } from \"ecsy/System\";\r\nimport { Types } from \"ecsy/Types\";\r\nimport { mat3, vec2 } from \"gl-matrix\";\r\nimport { IComponent } from \"../../Core/ComponentRegistry\";\r\nimport { TransformData2D } from \"../../Core/Locomotion/DataComponent/TransformData2D\";\r\nimport { Canvas2DRenderer } from \"../../Core/Render/System/Canvas2DRenderer\";\r\nimport { Vector2 } from \"../../Mathematics/Vector2\";\r\nimport { editorUIContext } from \"../EditorContext\";\r\n\r\nconst highlightThreshold = 25;\r\n\r\nexport class EditorInspectorSystem extends Canvas2DRenderer {\r\n  static inspectEntity: Entity | null = null;\r\n  static inspectTransform: Readonly<TransformData2D> | null = null;\r\n\r\n  static queries: SystemQueries = {\r\n    ...this.queries,\r\n    highlightEntity: {\r\n      components: [TransformData2D],\r\n    },\r\n  };\r\n\r\n  highlightEntity: Entity | null = null;\r\n\r\n  init(attributes?: Attributes | undefined): void {\r\n    super.init(attributes);\r\n\r\n    // Register mouse move event for main canvas.\r\n    this.mainCanvas.addEventListener(\"mousemove\", (event) => {\r\n      const mousePos = this.getMousePos(event);\r\n      const mouseWorldPos = this.screenToWorld(mousePos);\r\n\r\n      // If left mouse button is pressed, move the entity.\r\n      if (event.buttons === 1) {\r\n        if (EditorInspectorSystem.inspectEntity) {\r\n          const transform = EditorInspectorSystem.inspectEntity.getComponent(\r\n            TransformData2D\r\n          ) as TransformData2D;\r\n\r\n          transform.position.copy(\r\n            new Vector2(mouseWorldPos[0], mouseWorldPos[1])\r\n          );\r\n        }\r\n      } else {\r\n        // Pick the closest entity and highlight it.\r\n        let closestEntity: Entity | null = null;\r\n        let closestDistance = Number.MAX_VALUE;\r\n\r\n        // Find the closest entity.\r\n        this.queries.highlightEntity.results.forEach((entity) => {\r\n          const transform = entity.getComponent(\r\n            TransformData2D\r\n          ) as TransformData2D;\r\n          const distance = vec2.distance(\r\n            mouseWorldPos,\r\n            transform.position.value\r\n          );\r\n\r\n          if (distance < highlightThreshold && distance < closestDistance) {\r\n            closestEntity = entity;\r\n            closestDistance = distance;\r\n          }\r\n        });\r\n\r\n        // Set the highlight entity.\r\n        this.highlightEntity = closestEntity;\r\n      }\r\n    });\r\n\r\n    // Register left mouse down.\r\n    this.mainCanvas.addEventListener(\"mousedown\", (event) => {\r\n      if (event.button === 0) {\r\n        if (this.highlightEntity) {\r\n          // Select the entity.\r\n          EditorInspectorSystem.updateEntityInspector(this.highlightEntity);\r\n        } else {\r\n          // Clear the entity inspector.\r\n          EditorInspectorSystem.updateEntityInspector(null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(delta: number, time: number): void {\r\n    try {\r\n      super.execute(delta, time);\r\n    } catch (error) {\r\n      console.warn(error);\r\n      return;\r\n    }\r\n\r\n    // Draw transform and enable selection here.\r\n\r\n    // Get the camera transform.\r\n    const cameraTransform = this.queries.mainCamera.results[0].getComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n    // Get the canvas size.\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n\r\n    // Construct world to camera matrix.\r\n    const worldToCamera = mat3.create();\r\n    mat3.multiply(\r\n      worldToCamera,\r\n      worldToCamera,\r\n      this.worldToCamera(cameraTransform, canvasSize)\r\n    );\r\n\r\n    // Draw selected entity.\r\n    if (EditorInspectorSystem.inspectTransform) {\r\n      // Construct object to camera matrix.\r\n      const inspectObjToCamera = mat3.create();\r\n      mat3.multiply(\r\n        inspectObjToCamera,\r\n        worldToCamera,\r\n        this.objectToWorld(EditorInspectorSystem.inspectTransform)\r\n      );\r\n\r\n      // Draw axis.\r\n      this.canvasContext.setTransform(\r\n        inspectObjToCamera[0],\r\n        inspectObjToCamera[1],\r\n        inspectObjToCamera[3],\r\n        inspectObjToCamera[4],\r\n        inspectObjToCamera[6],\r\n        inspectObjToCamera[7]\r\n      );\r\n\r\n      this.drawAxis();\r\n    }\r\n\r\n    // Draw highlight.\r\n    if (this.highlightEntity) {\r\n      const transform = this.highlightEntity.getComponent(\r\n        TransformData2D\r\n      ) as TransformData2D;\r\n\r\n      const highlightObjToCamera = mat3.create();\r\n      mat3.multiply(\r\n        highlightObjToCamera,\r\n        worldToCamera,\r\n        this.objectToWorld(transform)\r\n      );\r\n\r\n      this.canvasContext.setTransform(\r\n        highlightObjToCamera[0],\r\n        highlightObjToCamera[1],\r\n        highlightObjToCamera[3],\r\n        highlightObjToCamera[4],\r\n        highlightObjToCamera[6],\r\n        highlightObjToCamera[7]\r\n      );\r\n\r\n      this.drawHighlight();\r\n    }\r\n\r\n    // Reset the transform.\r\n    this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * Get the mouse position in screen space.\r\n   *\r\n   * @param event canvas mouse event.\r\n   * @returns mouse position in screen space.\r\n   */\r\n  getMousePos(event: MouseEvent): vec2 {\r\n    const rect = this.mainCanvas.getBoundingClientRect();\r\n    return vec2.fromValues(event.clientX - rect.left, event.clientY - rect.top);\r\n  }\r\n\r\n  /**\r\n   * Convert screen space to world space.\r\n   *\r\n   * @param screenPos screen position.\r\n   * @returns world position.\r\n   */\r\n  screenToWorld(screenPos: vec2): vec2 {\r\n    const cameraTransform = this.queries.mainCamera.results[0].getComponent(\r\n      TransformData2D\r\n    ) as TransformData2D;\r\n    const canvasSize = vec2.fromValues(\r\n      this.mainCanvas.width,\r\n      this.mainCanvas.height\r\n    );\r\n\r\n    const worldPos = vec2.create();\r\n    vec2.transformMat3(\r\n      worldPos,\r\n      screenPos,\r\n      mat3.invert(\r\n        mat3.create(),\r\n        this.worldToCamera(cameraTransform, canvasSize)\r\n      )\r\n    );\r\n\r\n    return worldPos;\r\n  }\r\n\r\n  drawAxis(): void {\r\n    // Draw x axis.\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.strokeStyle = \"red\";\r\n    this.canvasContext.lineWidth = 2;\r\n    this.canvasContext.moveTo(0, 0);\r\n    this.canvasContext.lineTo(100, 0);\r\n    this.canvasContext.stroke();\r\n    // Draw x arrow tip.\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.moveTo(100, 0);\r\n    this.canvasContext.lineTo(100, 5);\r\n    this.canvasContext.lineTo(110, 0);\r\n    this.canvasContext.lineTo(100, -5);\r\n    this.canvasContext.lineTo(100, 0);\r\n    this.canvasContext.fillStyle = \"red\";\r\n    this.canvasContext.fill();\r\n\r\n    // Draw y axis.\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.strokeStyle = \"blue\";\r\n    this.canvasContext.lineWidth = 2;\r\n    this.canvasContext.moveTo(0, 0);\r\n    this.canvasContext.lineTo(0, 100);\r\n    this.canvasContext.stroke();\r\n\r\n    // Draw y arrow tip.\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.moveTo(0, 100);\r\n    this.canvasContext.lineTo(5, 100);\r\n    this.canvasContext.lineTo(0, 110);\r\n    this.canvasContext.lineTo(-5, 100);\r\n    this.canvasContext.lineTo(0, 100);\r\n    this.canvasContext.fillStyle = \"blue\";\r\n    this.canvasContext.fill();\r\n\r\n    // Draw center point.\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.fillStyle = \"green\";\r\n    this.canvasContext.arc(0, 0, 5, 0, 2 * Math.PI);\r\n    this.canvasContext.fill();\r\n  }\r\n\r\n  drawHighlight(): void {\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.strokeStyle = \"blue\";\r\n    this.canvasContext.lineWidth = 2;\r\n    this.canvasContext.arc(0, 0, highlightThreshold, 0, 2 * Math.PI);\r\n    this.canvasContext.stroke();\r\n  }\r\n\r\n  static updateEntityInspector = (entity: Entity | null) => {\r\n    EditorInspectorSystem.inspectEntity = entity;\r\n    // Check if the inspectEntity has Transform component.\r\n    if (entity?.hasComponent(TransformData2D)) {\r\n      this.inspectTransform = entity.getComponent(\r\n        TransformData2D\r\n      ) as Readonly<TransformData2D>;\r\n    } else {\r\n      this.inspectTransform = null;\r\n    }\r\n\r\n    EditorInspectorSystem.displayEntityInspector(entity);\r\n  };\r\n\r\n  static displayEntityInspector = (entity: Entity | null) => {\r\n    if (!editorUIContext.entityInspector) {\r\n      return;\r\n    }\r\n\r\n    if (entity === null) {\r\n      // Traverse all entityInspectors.\r\n      for (let i = 0; i < editorUIContext.entityInspector.length; i++) {\r\n        const entityInspector = editorUIContext.entityInspector[i];\r\n        // Remove all children.\r\n        while (entityInspector.firstChild) {\r\n          entityInspector.removeChild(entityInspector.firstChild);\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Get all components of entity.\r\n    const components = entity.getComponents();\r\n    const componentIndices = Object.keys(components);\r\n\r\n    // Traverse all entityInspectors.\r\n    for (let i = 0; i < editorUIContext.entityInspector.length; i++) {\r\n      const entityInspector = editorUIContext.entityInspector[i];\r\n      // Remove all children.\r\n      while (entityInspector.firstChild) {\r\n        entityInspector.removeChild(entityInspector.firstChild);\r\n      }\r\n\r\n      // Add remove entity button.\r\n      const entityOperationDiv = document.createElement(\"div\");\r\n      entityOperationDiv.className = \"componentListItem\";\r\n\r\n      const removeEntityButton = document.createElement(\"button\");\r\n      removeEntityButton.innerText = \"Remove Entity\";\r\n      removeEntityButton.style.width = \"100%\";\r\n      removeEntityButton.onclick = () => {\r\n        // Remove entity.\r\n        entity.remove();\r\n        // Update entity inspector.\r\n        EditorInspectorSystem.updateEntityInspector(null);\r\n      };\r\n\r\n      entityOperationDiv.appendChild(removeEntityButton);\r\n      entityInspector.appendChild(entityOperationDiv);\r\n\r\n      // Add components data.\r\n      for (let j = 0; j < componentIndices.length; j++) {\r\n        const componentIndex = componentIndices[j];\r\n        const component = components[componentIndex];\r\n\r\n        // Add component name.\r\n        const componentDiv = document.createElement(\"div\");\r\n        const componentTitle = document.createElement(\"span\");\r\n        componentTitle.innerText = component.constructor.name;\r\n        componentDiv.appendChild(componentTitle);\r\n\r\n        // Add component data.\r\n        const componentData = document.createElement(\"span\");\r\n        componentData.className = \"textarea\";\r\n        componentData.contentEditable = \"true\";\r\n        componentData.textContent =\r\n          EditorInspectorSystem.getComponentString(component);\r\n        componentData.style.whiteSpace = \"pre-wrap\";\r\n        componentData.style.resize = \"none\";\r\n        componentDiv.appendChild(componentData);\r\n\r\n        // Add a remove button.\r\n        const removeButton = document.createElement(\"button\");\r\n        removeButton.innerText = \"Remove\";\r\n        removeButton.onclick = () => {\r\n          // Remove component.\r\n          entity.removeComponent(Object.getPrototypeOf(component).constructor);\r\n          // Update entity inspector.\r\n          EditorInspectorSystem.updateEntityInspector(entity);\r\n        };\r\n        componentDiv.appendChild(removeButton);\r\n\r\n        // When component data is changed.\r\n        componentData.addEventListener(\"input\", (event) => {\r\n          const target = event.target as HTMLTextAreaElement;\r\n          try {\r\n            const newComponentData = JSON.parse(target.textContent || \"{}\");\r\n            Object.keys(newComponentData).forEach((key) => {\r\n              component[key as keyof typeof component] = newComponentData[key];\r\n            });\r\n          } catch (error) {\r\n            console.error(error);\r\n            return;\r\n          }\r\n        });\r\n\r\n        // When component data is changed.\r\n        component.onComponentChanged = (component) => {\r\n          // Check if the componentData box is focused.\r\n          if (document.activeElement !== componentData) {\r\n            componentData.textContent =\r\n              EditorInspectorSystem.getComponentString(component);\r\n          }\r\n        };\r\n\r\n        // Set css class.\r\n        componentDiv.className = \"componentListItem\";\r\n\r\n        // Add component to entityInspector.\r\n        entityInspector.appendChild(componentDiv);\r\n      }\r\n\r\n      const componentAddDiv = document.createElement(\"div\");\r\n      componentAddDiv.className = \"componentListItem\";\r\n\r\n      const componentNameInput = document.createElement(\"select\");\r\n      const componentList = IComponent.getImplementations();\r\n      const componentNames = componentList.map((component) => component.name);\r\n      for (let j = 0; j < componentNames.length; j++) {\r\n        const componentName = componentNames[j];\r\n        const option = document.createElement(\"option\");\r\n        option.value = componentName;\r\n        option.innerText = componentName;\r\n        componentNameInput.appendChild(option);\r\n      }\r\n      componentAddDiv.appendChild(componentNameInput);\r\n\r\n      // Add \"Add Component\" button.\r\n      const addComponentButton = document.createElement(\"button\");\r\n      addComponentButton.style.width = \"100%\";\r\n      addComponentButton.innerText = \"Add Component\";\r\n      addComponentButton.onclick = () => {\r\n        // Add component.\r\n        const componentList = IComponent.getImplementations();\r\n        console.log(componentNameInput.value);\r\n        // Get the component with the name.\r\n        let component = componentList.find(\r\n          (component) => component.name === componentNameInput.value\r\n        );\r\n        if (component) {\r\n          // Add component to entity.\r\n          entity.addComponent(component);\r\n          EditorInspectorSystem.updateEntityInspector(entity);\r\n        } else {\r\n          console.error(\"Component not found.\");\r\n        }\r\n      };\r\n      componentAddDiv.appendChild(addComponentButton);\r\n\r\n      entityInspector.appendChild(componentAddDiv);\r\n    }\r\n  };\r\n\r\n  private static getComponentString = (component: Component<any>) => {\r\n    const componentSchema = Object.getPrototypeOf(component).constructor\r\n      .schema as ComponentSchema;\r\n\r\n    const componentDataContent: { [key: string]: any } = {};\r\n    Object.keys(component).forEach((key) => {\r\n      if (\r\n        Object.keys(componentSchema).includes(key) &&\r\n        componentSchema[key].type !== Types.Ref\r\n      ) {\r\n        componentDataContent[key] = component[key as keyof typeof component];\r\n      }\r\n    });\r\n\r\n    return JSON.stringify(componentDataContent, null, \" \");\r\n  };\r\n}\r\n", "import { World } from \"ecsy/World\";\r\nimport { IWorldRegister } from \"../Utils/IWorldRegister\";\r\nimport { editorRenderContext } from \"./EditorContext\";\r\nimport { CamDragSystem } from \"../Utils/System/CamDragSystem\";\r\nimport { EditorInspectorSystem } from \"./System/EditorInspectorSystem\";\r\n\r\nexport class EditorSystemRegister {\r\n  mainCanvas: HTMLCanvasElement;\r\n\r\n  constructor(mainCanvas: HTMLCanvasElement) {\r\n    this.mainCanvas = mainCanvas;\r\n  }\r\n\r\n  register: IWorldRegister = (world: World) => {\r\n    world.registerSystem(CamDragSystem, {\r\n      mainCanvas: this.mainCanvas,\r\n    });\r\n\r\n    world.registerSystem(EditorInspectorSystem, {\r\n      mainCanvas: this.mainCanvas,\r\n    });\r\n  };\r\n}\r\n", "import { TagComponent } from \"ecsy/TagComponent\";\r\nimport { IComponent } from \"../../Core/ComponentRegistry\";\r\n\r\n@IComponent.register\r\nexport class EditorSceneCamTag extends TagComponent {}\r\n", "import { mainWorld, resetWorld } from \"../Core\";\r\nimport { coreSetup } from \"../Core/CoreSetup\";\r\nimport { TransformData2D } from \"../Core/Locomotion/DataComponent/TransformData2D\";\r\nimport {\r\n  BackgroundType,\r\n  CameraData2D,\r\n} from \"../Core/Render/DataComponent/CameraData2D\";\r\nimport { ImageRenderData2D } from \"../Core/Render/DataComponent/ImageRenderData2D\";\r\nimport { CameraTag } from \"../Core/Render/TagComponent/CameraTag\";\r\nimport { MainCameraTag } from \"../Core/Render/TagComponent/MainCameraTag\";\r\nimport { Vector2 } from \"../Mathematics/Vector2\";\r\nimport {\r\n  editorEventContext,\r\n  editorRenderContext,\r\n  editorUIContext,\r\n} from \"./EditorContext\";\r\nimport { addNewEntity, updateEntityList } from \"./EditorEntityListManager\";\r\nimport { EditorSystemRegister } from \"./EditorSystemRegister\";\r\nimport { EditorInspectorSystem } from \"./System/EditorInspectorSystem\";\r\nimport { EditorSceneCamTag } from \"./TagComponent/EditorSceneCamTag\";\r\n\r\nexport const editorInitialization = () => {\r\n  editorRenderContext.mainCanvas = document.getElementById(\r\n    \"mainCanvas\"\r\n  ) as HTMLCanvasElement;\r\n  editorUIContext.entityLists = document.getElementsByClassName(\r\n    \"entityList\"\r\n  ) as HTMLCollectionOf<HTMLDivElement>;\r\n  editorUIContext.entityInspector = document.getElementsByClassName(\r\n    \"entityInspector\"\r\n  ) as HTMLCollectionOf<HTMLDivElement>;\r\n  editorUIContext.playButton = document.getElementById(\r\n    \"playButton\"\r\n  ) as HTMLButtonElement;\r\n\r\n  editorUIContext.entityNameInput = document.getElementById(\r\n    \"entityName\"\r\n  ) as HTMLInputElement;\r\n  editorUIContext.createEntityButton = document.getElementById(\r\n    \"createEntityButton\"\r\n  ) as HTMLButtonElement;\r\n\r\n  // Disable right click for main canvas.\r\n  editorRenderContext.mainCanvas.oncontextmenu = () => false;\r\n\r\n  // Register main world entity change.\r\n  mainWorld.onEntityChanged.push(updateEntityList);\r\n  // Register entity selected event.\r\n  editorEventContext.onEntitySelected.push(\r\n    EditorInspectorSystem.updateEntityInspector\r\n  );\r\n\r\n  // Core setup.\r\n  coreSetup();\r\n\r\n  // Register Editor System.\r\n  new EditorSystemRegister(editorRenderContext.mainCanvas).register(mainWorld);\r\n\r\n  // Setup play button.\r\n  setupPlayButton();\r\n\r\n  // Setup create entity button.\r\n  setupCreateEntityButton();\r\n};\r\n\r\nexport const setupEditorSceneCamera = () => {\r\n  // Add a editor scene camera.\r\n  editorRenderContext.mainCamera = mainWorld.createEntity(\"EditorSceneCamera\");\r\n  editorRenderContext.mainCamera\r\n    .addComponent(EditorSceneCamTag)\r\n    .addComponent(CameraTag)\r\n    .addComponent(MainCameraTag)\r\n    .addComponent(CameraData2D, {\r\n      backgroundType: BackgroundType.Color,\r\n      backgroundColor: \"#000000\",\r\n    })\r\n    .addComponent(TransformData2D, {\r\n      position: new Vector2(0, 0),\r\n      scale: new Vector2(1, 1),\r\n    });\r\n\r\n  // TODO: Remove debug image here.\r\n  // Add a image entity.\r\n  for (let i = 0; i < 5; i++) {\r\n    const imageEntity = mainWorld.createEntity();\r\n    let imageTarget = new Image();\r\n    imageTarget.src = \"https://picsum.photos/200\";\r\n    // Random position.\r\n    const position = new Vector2(\r\n      Math.random() * 1000 - 500,\r\n      Math.random() * 1000 - 500\r\n    );\r\n    imageEntity\r\n      .addComponent(TransformData2D, {\r\n        position: position,\r\n        scale: new Vector2(1, 1),\r\n      })\r\n      .addComponent(ImageRenderData2D, {\r\n        img: imageTarget,\r\n        imageCenter: new Vector2(100, 100),\r\n      });\r\n  }\r\n};\r\n\r\nconst setupPlayButton = () => {\r\n  editorUIContext.playButton?.addEventListener(\"click\", () => {\r\n    // Create a new world.\r\n    resetWorld();\r\n\r\n    // Register main world entity change.\r\n    mainWorld.onEntityChanged.push(updateEntityList);\r\n    // Register entity selected event.\r\n    editorEventContext.onEntitySelected.push(\r\n      EditorInspectorSystem.updateEntityInspector\r\n    );\r\n    updateEntityList([]);\r\n    EditorInspectorSystem.updateEntityInspector(null);\r\n\r\n    // Setup core.\r\n    coreSetup();\r\n  });\r\n};\r\n\r\nconst setupCreateEntityButton = () => {\r\n  editorUIContext.createEntityButton?.addEventListener(\"click\", () => {\r\n    if (editorUIContext.entityNameInput) {\r\n      addNewEntity(editorUIContext.entityNameInput.value);\r\n      editorUIContext.entityNameInput.value = \"\";\r\n    } else {\r\n      addNewEntity();\r\n    }\r\n  });\r\n};\r\n", "import { mainInit } from \"../Core\";\r\nimport { editorRenderContext } from \"./EditorContext\";\r\nimport {\r\n  editorInitialization,\r\n  setupEditorSceneCamera,\r\n} from \"./EditorInitialization\";\r\n\r\nconst main = () => {\r\n  console.log(\"Editor Started\");\r\n\r\n  // Call editor initialization.\r\n  editorInitialization();\r\n\r\n  // Setup scene camera.\r\n  setupEditorSceneCamera();\r\n\r\n  // White Dwarf Engine initialization.\r\n  mainInit();\r\n\r\n  // Resize .\r\n  onResize();\r\n};\r\n\r\nconst onResize = () => {\r\n  // Resize mainCanvas.\r\n  if (editorRenderContext.mainCanvas) {\r\n    editorRenderContext.mainCanvas.width =\r\n      editorRenderContext.mainCanvas.clientWidth;\r\n    editorRenderContext.mainCanvas.height =\r\n      editorRenderContext.mainCanvas.clientHeight;\r\n  }\r\n};\r\n\r\nwindow.onload = main;\r\nwindow.onresize = onResize;\r\n"],
  "mappings": "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",
  "names": ["clone", "Component", "clone", "Component", "Component", "Component", "Component", "System", "IComponent", "scale", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotate", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotate", "str", "exactEquals", "equals", "sub", "mul", "Component", "distance", "component", "componentList"]
}
